<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <groupId>edu.ryan.jersey</groupId>
    <artifactId>jersey-example</artifactId>
    <packaging>war</packaging>
    <version>1.0-SNAPSHOT</version>
    <name>jersey-example</name>

    <properties>
        <slf4j.version>1.7.13</slf4j.version>
        <guice.version>3.0</guice.version>
        <jersey.version>2.6</jersey.version> <!-- 2.22.1 is the latest release, but doesn't seem to work with the bridge -->
        <hk2.guice.bridge.version>2.1.93</hk2.guice.bridge.version>
        <jackson.version>1.9.???</jackson.version>
    </properties>
    <dependencies>

        <!-- BEGIN executable WAR dependencies -->
        <!-- It's important that all of the dependencies for the executable WAR are provided scope.  If you do not do
             this, then the dependencies (including jetty, servlet, jasper, etc.) will end up included in the WAR and
             you will have weird problems in your real environment (tomcat, etc.). -->
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-webapp</artifactId>
            <version>9.2.14.v20151106</version>
            <scope>provided</scope>
        </dependency>
        <!-- END executable WAR dependencies -->

        <!-- BEGIN dependencies for code quality -->
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
            <version>3.0.1</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.9</version>
            <scope>test</scope>
        </dependency>
        <!-- END dependencies for code quality -->

        <!-- BEGIN dependencies for DI -->
        <dependency>
            <groupId>com.google.inject</groupId>
            <artifactId>guice</artifactId>
            <version>${guice.version}</version>
        </dependency>
        <!-- END dependencies for DI -->

        <!-- BEGIN dependencies for performance metrics -->
        <dependency>
            <groupId>com.palominolabs.metrics</groupId>
            <artifactId>metrics-guice</artifactId>
            <version>3.1.3</version>
        </dependency>
        <dependency>
            <groupId>io.dropwizard.metrics</groupId>
            <artifactId>metrics-core</artifactId>
            <version>3.1.2</version>
        </dependency>
        <!-- END dependencies for performance metrics -->

        <!-- BEGIN dependencies for logging -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <!-- END dependencies for logging -->

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.1</version>
        </dependency>

        <dependency>
            <groupId>org.glassfish.jersey.containers</groupId>
            <artifactId>jersey-container-servlet-core</artifactId>
            <version>${jersey.version}</version>
        </dependency>

        <!--<dependency>-->
            <!--<groupId>org.glassfish.jersey.containers</groupId>-->
            <!--<artifactId>jersey-container-grizzly2-http</artifactId>-->
            <!--<version>2.22.1</version>-->
        <!--</dependency>-->

        <!-- TODO, change to jackson? -->
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-moxy</artifactId>
            <version>${jersey.version}</version>
        </dependency>

        <dependency>
            <groupId>org.glassfish.hk2</groupId>
            <artifactId>guice-bridge</artifactId>
            <version>${hk2.guice.bridge.version}</version>
        </dependency>

        <dependency>
            <groupId>com.google.inject.extensions</groupId>
            <artifactId>guice-servlet</artifactId>
            <version>${guice.version}</version>
        </dependency>

    </dependencies>

    <build>
        <plugins>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.5.1</version>
                <inherited>true</inherited>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                </configuration>
            </plugin>

            <plugin>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.6</version>
                <configuration>
                    <warName>${project.artifactId}-${project.version}</warName>
                    <archive>
                        <manifest>
                            <mainClass>Main</mainClass>
                        </manifest>
                    </archive>
                </configuration>
                <executions>
                    <execution>
                        <id>default-war</id>
                        <phase>package</phase>
                        <goals>
                            <goal>war</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Copy our Main class to a place that we can execute with "java -jar" -->
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>main-class-placement</id>
                        <phase>prepare-package</phase>
                        <configuration>
                            <tasks>
                                <move todir="${project.build.directory}/${project.artifactId}-${project.version}/">
                                    <fileset dir="${project.build.directory}/classes/">
                                        <include name="Main.class"/>
                                    </fileset>
                                </move>
                            </tasks>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Extract our provided dependencies (jetty, servlet, jasper, etc.) to a place that we can execute with
                 "java -jar" -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>2.3</version>
                <executions>
                    <execution>
                        <id>jetty-classpath</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>unpack-dependencies</goal>
                        </goals>
                        <configuration>
                            <includeGroupIds>org.eclipse.jetty,javax.servlet</includeGroupIds>
                            <excludeArtifactIds>jsp-api,jstl</excludeArtifactIds>
                            <excludes>META-INF/ECLIPSEF.*</excludes>
                            <outputDirectory>
                                ${project.build.directory}/${project.artifactId}-${project.version}
                            </outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.2.1</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>java</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <mainClass>Main</mainClass>
                </configuration>
            </plugin>

        </plugins>
    </build>

</project>
